

#pragma once

#ifndef GO_MOC_H
#define GO_MOC_H

#include <stdint.h>

#ifdef __cplusplus
class ApproveListingCtx721036;
void ApproveListingCtx721036_ApproveListingCtx721036_QRegisterMetaTypes();
class CustomListModel721036;
void CustomListModel721036_CustomListModel721036_QRegisterMetaTypes();
class TxListCtx721036;
void TxListCtx721036_TxListCtx721036_QRegisterMetaTypes();
class TxListModel721036;
void TxListModel721036_TxListModel721036_QRegisterMetaTypes();
class ApproveImportCtx721036;
void ApproveImportCtx721036_ApproveImportCtx721036_QRegisterMetaTypes();
class ApproveNewAccountCtx721036;
void ApproveNewAccountCtx721036_ApproveNewAccountCtx721036_QRegisterMetaTypes();
class ApproveSignDataCtx721036;
void ApproveSignDataCtx721036_ApproveSignDataCtx721036_QRegisterMetaTypes();
class ApproveTxCtx721036;
void ApproveTxCtx721036_ApproveTxCtx721036_QRegisterMetaTypes();
class LoginCtx721036;
void LoginCtx721036_LoginCtx721036_QRegisterMetaTypes();
class TxListAccountsModel721036;
void TxListAccountsModel721036_TxListAccountsModel721036_QRegisterMetaTypes();
class ApproveExportCtx721036;
void ApproveExportCtx721036_ApproveExportCtx721036_QRegisterMetaTypes();
extern "C" {
#endif

struct Moc_PackedString { char* data; long long len; };
struct Moc_PackedList { void* data; long long len; };
void ApproveExportCtx721036_ConnectClicked(void* ptr);
void ApproveExportCtx721036_DisconnectClicked(void* ptr);
void ApproveExportCtx721036_Clicked(void* ptr, int b);
void ApproveExportCtx721036_ConnectBack(void* ptr);
void ApproveExportCtx721036_DisconnectBack(void* ptr);
void ApproveExportCtx721036_Back(void* ptr);
void ApproveExportCtx721036_ConnectPasswordEdited(void* ptr);
void ApproveExportCtx721036_DisconnectPasswordEdited(void* ptr);
void ApproveExportCtx721036_PasswordEdited(void* ptr, struct Moc_PackedString b);
struct Moc_PackedString ApproveExportCtx721036_Remote(void* ptr);
struct Moc_PackedString ApproveExportCtx721036_RemoteDefault(void* ptr);
void ApproveExportCtx721036_SetRemote(void* ptr, struct Moc_PackedString remote);
void ApproveExportCtx721036_SetRemoteDefault(void* ptr, struct Moc_PackedString remote);
void ApproveExportCtx721036_ConnectRemoteChanged(void* ptr);
void ApproveExportCtx721036_DisconnectRemoteChanged(void* ptr);
void ApproveExportCtx721036_RemoteChanged(void* ptr, struct Moc_PackedString remote);
struct Moc_PackedString ApproveExportCtx721036_Transport(void* ptr);
struct Moc_PackedString ApproveExportCtx721036_TransportDefault(void* ptr);
void ApproveExportCtx721036_SetTransport(void* ptr, struct Moc_PackedString transport);
void ApproveExportCtx721036_SetTransportDefault(void* ptr, struct Moc_PackedString transport);
void ApproveExportCtx721036_ConnectTransportChanged(void* ptr);
void ApproveExportCtx721036_DisconnectTransportChanged(void* ptr);
void ApproveExportCtx721036_TransportChanged(void* ptr, struct Moc_PackedString transport);
struct Moc_PackedString ApproveExportCtx721036_Endpoint(void* ptr);
struct Moc_PackedString ApproveExportCtx721036_EndpointDefault(void* ptr);
void ApproveExportCtx721036_SetEndpoint(void* ptr, struct Moc_PackedString endpoint);
void ApproveExportCtx721036_SetEndpointDefault(void* ptr, struct Moc_PackedString endpoint);
void ApproveExportCtx721036_ConnectEndpointChanged(void* ptr);
void ApproveExportCtx721036_DisconnectEndpointChanged(void* ptr);
void ApproveExportCtx721036_EndpointChanged(void* ptr, struct Moc_PackedString endpoint);
struct Moc_PackedString ApproveExportCtx721036_Address(void* ptr);
struct Moc_PackedString ApproveExportCtx721036_AddressDefault(void* ptr);
void ApproveExportCtx721036_SetAddress(void* ptr, struct Moc_PackedString address);
void ApproveExportCtx721036_SetAddressDefault(void* ptr, struct Moc_PackedString address);
void ApproveExportCtx721036_ConnectAddressChanged(void* ptr);
void ApproveExportCtx721036_DisconnectAddressChanged(void* ptr);
void ApproveExportCtx721036_AddressChanged(void* ptr, struct Moc_PackedString address);
struct Moc_PackedString ApproveExportCtx721036_Password(void* ptr);
struct Moc_PackedString ApproveExportCtx721036_PasswordDefault(void* ptr);
void ApproveExportCtx721036_SetPassword(void* ptr, struct Moc_PackedString password);
void ApproveExportCtx721036_SetPasswordDefault(void* ptr, struct Moc_PackedString password);
void ApproveExportCtx721036_ConnectPasswordChanged(void* ptr);
void ApproveExportCtx721036_DisconnectPasswordChanged(void* ptr);
void ApproveExportCtx721036_PasswordChanged(void* ptr, struct Moc_PackedString password);
struct Moc_PackedString ApproveExportCtx721036_FromSrc(void* ptr);
struct Moc_PackedString ApproveExportCtx721036_FromSrcDefault(void* ptr);
void ApproveExportCtx721036_SetFromSrc(void* ptr, struct Moc_PackedString fromSrc);
void ApproveExportCtx721036_SetFromSrcDefault(void* ptr, struct Moc_PackedString fromSrc);
void ApproveExportCtx721036_ConnectFromSrcChanged(void* ptr);
void ApproveExportCtx721036_DisconnectFromSrcChanged(void* ptr);
void ApproveExportCtx721036_FromSrcChanged(void* ptr, struct Moc_PackedString fromSrc);
int ApproveExportCtx721036_ApproveExportCtx721036_QRegisterMetaType();
int ApproveExportCtx721036_ApproveExportCtx721036_QRegisterMetaType2(char* typeName);
int ApproveExportCtx721036_ApproveExportCtx721036_QmlRegisterType();
int ApproveExportCtx721036_ApproveExportCtx721036_QmlRegisterType2(char* uri, int versionMajor, int versionMinor, char* qmlName);
void* ApproveExportCtx721036___dynamicPropertyNames_atList(void* ptr, int i);
void ApproveExportCtx721036___dynamicPropertyNames_setList(void* ptr, void* i);
void* ApproveExportCtx721036___dynamicPropertyNames_newList(void* ptr);
void* ApproveExportCtx721036___findChildren_atList2(void* ptr, int i);
void ApproveExportCtx721036___findChildren_setList2(void* ptr, void* i);
void* ApproveExportCtx721036___findChildren_newList2(void* ptr);
void* ApproveExportCtx721036___findChildren_atList3(void* ptr, int i);
void ApproveExportCtx721036___findChildren_setList3(void* ptr, void* i);
void* ApproveExportCtx721036___findChildren_newList3(void* ptr);
void* ApproveExportCtx721036___findChildren_atList(void* ptr, int i);
void ApproveExportCtx721036___findChildren_setList(void* ptr, void* i);
void* ApproveExportCtx721036___findChildren_newList(void* ptr);
void* ApproveExportCtx721036___children_atList(void* ptr, int i);
void ApproveExportCtx721036___children_setList(void* ptr, void* i);
void* ApproveExportCtx721036___children_newList(void* ptr);
void* ApproveExportCtx721036_NewApproveExportCtx(void* parent);
void ApproveExportCtx721036_DestroyApproveExportCtx(void* ptr);
void ApproveExportCtx721036_DestroyApproveExportCtxDefault(void* ptr);
char ApproveExportCtx721036_EventDefault(void* ptr, void* e);
char ApproveExportCtx721036_EventFilterDefault(void* ptr, void* watched, void* event);
void ApproveExportCtx721036_ChildEventDefault(void* ptr, void* event);
void ApproveExportCtx721036_ConnectNotifyDefault(void* ptr, void* sign);
void ApproveExportCtx721036_CustomEventDefault(void* ptr, void* event);
void ApproveExportCtx721036_DeleteLaterDefault(void* ptr);
void ApproveExportCtx721036_DisconnectNotifyDefault(void* ptr, void* sign);
void ApproveExportCtx721036_TimerEventDefault(void* ptr, void* event);
;
void ApproveSignDataCtx721036_ConnectClicked(void* ptr);
void ApproveSignDataCtx721036_DisconnectClicked(void* ptr);
void ApproveSignDataCtx721036_Clicked(void* ptr, int b);
void ApproveSignDataCtx721036_ConnectBack(void* ptr);
void ApproveSignDataCtx721036_DisconnectBack(void* ptr);
void ApproveSignDataCtx721036_Back(void* ptr);
void ApproveSignDataCtx721036_ConnectEdited(void* ptr);
void ApproveSignDataCtx721036_DisconnectEdited(void* ptr);
void ApproveSignDataCtx721036_Edited(void* ptr, struct Moc_PackedString b, struct Moc_PackedString value);
struct Moc_PackedString ApproveSignDataCtx721036_Remote(void* ptr);
struct Moc_PackedString ApproveSignDataCtx721036_RemoteDefault(void* ptr);
void ApproveSignDataCtx721036_SetRemote(void* ptr, struct Moc_PackedString remote);
void ApproveSignDataCtx721036_SetRemoteDefault(void* ptr, struct Moc_PackedString remote);
void ApproveSignDataCtx721036_ConnectRemoteChanged(void* ptr);
void ApproveSignDataCtx721036_DisconnectRemoteChanged(void* ptr);
void ApproveSignDataCtx721036_RemoteChanged(void* ptr, struct Moc_PackedString remote);
struct Moc_PackedString ApproveSignDataCtx721036_Transport(void* ptr);
struct Moc_PackedString ApproveSignDataCtx721036_TransportDefault(void* ptr);
void ApproveSignDataCtx721036_SetTransport(void* ptr, struct Moc_PackedString transport);
void ApproveSignDataCtx721036_SetTransportDefault(void* ptr, struct Moc_PackedString transport);
void ApproveSignDataCtx721036_ConnectTransportChanged(void* ptr);
void ApproveSignDataCtx721036_DisconnectTransportChanged(void* ptr);
void ApproveSignDataCtx721036_TransportChanged(void* ptr, struct Moc_PackedString transport);
struct Moc_PackedString ApproveSignDataCtx721036_Endpoint(void* ptr);
struct Moc_PackedString ApproveSignDataCtx721036_EndpointDefault(void* ptr);
void ApproveSignDataCtx721036_SetEndpoint(void* ptr, struct Moc_PackedString endpoint);
void ApproveSignDataCtx721036_SetEndpointDefault(void* ptr, struct Moc_PackedString endpoint);
void ApproveSignDataCtx721036_ConnectEndpointChanged(void* ptr);
void ApproveSignDataCtx721036_DisconnectEndpointChanged(void* ptr);
void ApproveSignDataCtx721036_EndpointChanged(void* ptr, struct Moc_PackedString endpoint);
struct Moc_PackedString ApproveSignDataCtx721036_From(void* ptr);
struct Moc_PackedString ApproveSignDataCtx721036_FromDefault(void* ptr);
void ApproveSignDataCtx721036_SetFrom(void* ptr, struct Moc_PackedString from);
void ApproveSignDataCtx721036_SetFromDefault(void* ptr, struct Moc_PackedString from);
void ApproveSignDataCtx721036_ConnectFromChanged(void* ptr);
void ApproveSignDataCtx721036_DisconnectFromChanged(void* ptr);
void ApproveSignDataCtx721036_FromChanged(void* ptr, struct Moc_PackedString from);
struct Moc_PackedString ApproveSignDataCtx721036_Message(void* ptr);
struct Moc_PackedString ApproveSignDataCtx721036_MessageDefault(void* ptr);
void ApproveSignDataCtx721036_SetMessage(void* ptr, struct Moc_PackedString message);
void ApproveSignDataCtx721036_SetMessageDefault(void* ptr, struct Moc_PackedString message);
void ApproveSignDataCtx721036_ConnectMessageChanged(void* ptr);
void ApproveSignDataCtx721036_DisconnectMessageChanged(void* ptr);
void ApproveSignDataCtx721036_MessageChanged(void* ptr, struct Moc_PackedString message);
struct Moc_PackedString ApproveSignDataCtx721036_RawData(void* ptr);
struct Moc_PackedString ApproveSignDataCtx721036_RawDataDefault(void* ptr);
void ApproveSignDataCtx721036_SetRawData(void* ptr, struct Moc_PackedString rawData);
void ApproveSignDataCtx721036_SetRawDataDefault(void* ptr, struct Moc_PackedString rawData);
void ApproveSignDataCtx721036_ConnectRawDataChanged(void* ptr);
void ApproveSignDataCtx721036_DisconnectRawDataChanged(void* ptr);
void ApproveSignDataCtx721036_RawDataChanged(void* ptr, struct Moc_PackedString rawData);
struct Moc_PackedString ApproveSignDataCtx721036_Hash(void* ptr);
struct Moc_PackedString ApproveSignDataCtx721036_HashDefault(void* ptr);
void ApproveSignDataCtx721036_SetHash(void* ptr, struct Moc_PackedString hash);
void ApproveSignDataCtx721036_SetHashDefault(void* ptr, struct Moc_PackedString hash);
void ApproveSignDataCtx721036_ConnectHashChanged(void* ptr);
void ApproveSignDataCtx721036_DisconnectHashChanged(void* ptr);
void ApproveSignDataCtx721036_HashChanged(void* ptr, struct Moc_PackedString hash);
struct Moc_PackedString ApproveSignDataCtx721036_Password(void* ptr);
struct Moc_PackedString ApproveSignDataCtx721036_PasswordDefault(void* ptr);
void ApproveSignDataCtx721036_SetPassword(void* ptr, struct Moc_PackedString password);
void ApproveSignDataCtx721036_SetPasswordDefault(void* ptr, struct Moc_PackedString password);
void ApproveSignDataCtx721036_ConnectPasswordChanged(void* ptr);
void ApproveSignDataCtx721036_DisconnectPasswordChanged(void* ptr);
void ApproveSignDataCtx721036_PasswordChanged(void* ptr, struct Moc_PackedString password);
struct Moc_PackedString ApproveSignDataCtx721036_FromSrc(void* ptr);
struct Moc_PackedString ApproveSignDataCtx721036_FromSrcDefault(void* ptr);
void ApproveSignDataCtx721036_SetFromSrc(void* ptr, struct Moc_PackedString fromSrc);
void ApproveSignDataCtx721036_SetFromSrcDefault(void* ptr, struct Moc_PackedString fromSrc);
void ApproveSignDataCtx721036_ConnectFromSrcChanged(void* ptr);
void ApproveSignDataCtx721036_DisconnectFromSrcChanged(void* ptr);
void ApproveSignDataCtx721036_FromSrcChanged(void* ptr, struct Moc_PackedString fromSrc);
int ApproveSignDataCtx721036_ApproveSignDataCtx721036_QRegisterMetaType();
int ApproveSignDataCtx721036_ApproveSignDataCtx721036_QRegisterMetaType2(char* typeName);
int ApproveSignDataCtx721036_ApproveSignDataCtx721036_QmlRegisterType();
int ApproveSignDataCtx721036_ApproveSignDataCtx721036_QmlRegisterType2(char* uri, int versionMajor, int versionMinor, char* qmlName);
void* ApproveSignDataCtx721036___dynamicPropertyNames_atList(void* ptr, int i);
void ApproveSignDataCtx721036___dynamicPropertyNames_setList(void* ptr, void* i);
void* ApproveSignDataCtx721036___dynamicPropertyNames_newList(void* ptr);
void* ApproveSignDataCtx721036___findChildren_atList2(void* ptr, int i);
void ApproveSignDataCtx721036___findChildren_setList2(void* ptr, void* i);
void* ApproveSignDataCtx721036___findChildren_newList2(void* ptr);
void* ApproveSignDataCtx721036___findChildren_atList3(void* ptr, int i);
void ApproveSignDataCtx721036___findChildren_setList3(void* ptr, void* i);
void* ApproveSignDataCtx721036___findChildren_newList3(void* ptr);
void* ApproveSignDataCtx721036___findChildren_atList(void* ptr, int i);
void ApproveSignDataCtx721036___findChildren_setList(void* ptr, void* i);
void* ApproveSignDataCtx721036___findChildren_newList(void* ptr);
void* ApproveSignDataCtx721036___children_atList(void* ptr, int i);
void ApproveSignDataCtx721036___children_setList(void* ptr, void* i);
void* ApproveSignDataCtx721036___children_newList(void* ptr);
void* ApproveSignDataCtx721036_NewApproveSignDataCtx(void* parent);
void ApproveSignDataCtx721036_DestroyApproveSignDataCtx(void* ptr);
void ApproveSignDataCtx721036_DestroyApproveSignDataCtxDefault(void* ptr);
char ApproveSignDataCtx721036_EventDefault(void* ptr, void* e);
char ApproveSignDataCtx721036_EventFilterDefault(void* ptr, void* watched, void* event);
void ApproveSignDataCtx721036_ChildEventDefault(void* ptr, void* event);
void ApproveSignDataCtx721036_ConnectNotifyDefault(void* ptr, void* sign);
void ApproveSignDataCtx721036_CustomEventDefault(void* ptr, void* event);
void ApproveSignDataCtx721036_DeleteLaterDefault(void* ptr);
void ApproveSignDataCtx721036_DisconnectNotifyDefault(void* ptr, void* sign);
void ApproveSignDataCtx721036_TimerEventDefault(void* ptr, void* event);
;
void ApproveTxCtx721036_ConnectClicked(void* ptr);
void ApproveTxCtx721036_DisconnectClicked(void* ptr);
void ApproveTxCtx721036_Clicked(void* ptr, int b);
void ApproveTxCtx721036_ConnectBack(void* ptr);
void ApproveTxCtx721036_DisconnectBack(void* ptr);
void ApproveTxCtx721036_Back(void* ptr);
void ApproveTxCtx721036_ConnectEdited(void* ptr);
void ApproveTxCtx721036_DisconnectEdited(void* ptr);
void ApproveTxCtx721036_Edited(void* ptr, struct Moc_PackedString s, struct Moc_PackedString v);
void ApproveTxCtx721036_ConnectChangeValueUnit(void* ptr);
void ApproveTxCtx721036_DisconnectChangeValueUnit(void* ptr);
void ApproveTxCtx721036_ChangeValueUnit(void* ptr, int v);
void ApproveTxCtx721036_ConnectChangeGasPriceUnit(void* ptr);
void ApproveTxCtx721036_DisconnectChangeGasPriceUnit(void* ptr);
void ApproveTxCtx721036_ChangeGasPriceUnit(void* ptr, int v);
double ApproveTxCtx721036_ValueUnit(void* ptr);
double ApproveTxCtx721036_ValueUnitDefault(void* ptr);
void ApproveTxCtx721036_SetValueUnit(void* ptr, double valueUnit);
void ApproveTxCtx721036_SetValueUnitDefault(void* ptr, double valueUnit);
void ApproveTxCtx721036_ConnectValueUnitChanged(void* ptr);
void ApproveTxCtx721036_DisconnectValueUnitChanged(void* ptr);
void ApproveTxCtx721036_ValueUnitChanged(void* ptr, double valueUnit);
struct Moc_PackedString ApproveTxCtx721036_Remote(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_RemoteDefault(void* ptr);
void ApproveTxCtx721036_SetRemote(void* ptr, struct Moc_PackedString remote);
void ApproveTxCtx721036_SetRemoteDefault(void* ptr, struct Moc_PackedString remote);
void ApproveTxCtx721036_ConnectRemoteChanged(void* ptr);
void ApproveTxCtx721036_DisconnectRemoteChanged(void* ptr);
void ApproveTxCtx721036_RemoteChanged(void* ptr, struct Moc_PackedString remote);
struct Moc_PackedString ApproveTxCtx721036_Transport(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_TransportDefault(void* ptr);
void ApproveTxCtx721036_SetTransport(void* ptr, struct Moc_PackedString transport);
void ApproveTxCtx721036_SetTransportDefault(void* ptr, struct Moc_PackedString transport);
void ApproveTxCtx721036_ConnectTransportChanged(void* ptr);
void ApproveTxCtx721036_DisconnectTransportChanged(void* ptr);
void ApproveTxCtx721036_TransportChanged(void* ptr, struct Moc_PackedString transport);
struct Moc_PackedString ApproveTxCtx721036_Endpoint(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_EndpointDefault(void* ptr);
void ApproveTxCtx721036_SetEndpoint(void* ptr, struct Moc_PackedString endpoint);
void ApproveTxCtx721036_SetEndpointDefault(void* ptr, struct Moc_PackedString endpoint);
void ApproveTxCtx721036_ConnectEndpointChanged(void* ptr);
void ApproveTxCtx721036_DisconnectEndpointChanged(void* ptr);
void ApproveTxCtx721036_EndpointChanged(void* ptr, struct Moc_PackedString endpoint);
struct Moc_PackedString ApproveTxCtx721036_Data(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_DataDefault(void* ptr);
void ApproveTxCtx721036_SetData(void* ptr, struct Moc_PackedString data);
void ApproveTxCtx721036_SetDataDefault(void* ptr, struct Moc_PackedString data);
void ApproveTxCtx721036_ConnectDataChanged(void* ptr);
void ApproveTxCtx721036_DisconnectDataChanged(void* ptr);
void ApproveTxCtx721036_DataChanged(void* ptr, struct Moc_PackedString data);
struct Moc_PackedString ApproveTxCtx721036_From(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_FromDefault(void* ptr);
void ApproveTxCtx721036_SetFrom(void* ptr, struct Moc_PackedString from);
void ApproveTxCtx721036_SetFromDefault(void* ptr, struct Moc_PackedString from);
void ApproveTxCtx721036_ConnectFromChanged(void* ptr);
void ApproveTxCtx721036_DisconnectFromChanged(void* ptr);
void ApproveTxCtx721036_FromChanged(void* ptr, struct Moc_PackedString from);
struct Moc_PackedString ApproveTxCtx721036_FromWarning(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_FromWarningDefault(void* ptr);
void ApproveTxCtx721036_SetFromWarning(void* ptr, struct Moc_PackedString fromWarning);
void ApproveTxCtx721036_SetFromWarningDefault(void* ptr, struct Moc_PackedString fromWarning);
void ApproveTxCtx721036_ConnectFromWarningChanged(void* ptr);
void ApproveTxCtx721036_DisconnectFromWarningChanged(void* ptr);
void ApproveTxCtx721036_FromWarningChanged(void* ptr, struct Moc_PackedString fromWarning);
char ApproveTxCtx721036_IsFromVisible(void* ptr);
char ApproveTxCtx721036_IsFromVisibleDefault(void* ptr);
void ApproveTxCtx721036_SetFromVisible(void* ptr, char fromVisible);
void ApproveTxCtx721036_SetFromVisibleDefault(void* ptr, char fromVisible);
void ApproveTxCtx721036_ConnectFromVisibleChanged(void* ptr);
void ApproveTxCtx721036_DisconnectFromVisibleChanged(void* ptr);
void ApproveTxCtx721036_FromVisibleChanged(void* ptr, char fromVisible);
struct Moc_PackedString ApproveTxCtx721036_To(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_ToDefault(void* ptr);
void ApproveTxCtx721036_SetTo(void* ptr, struct Moc_PackedString to);
void ApproveTxCtx721036_SetToDefault(void* ptr, struct Moc_PackedString to);
void ApproveTxCtx721036_ConnectToChanged(void* ptr);
void ApproveTxCtx721036_DisconnectToChanged(void* ptr);
void ApproveTxCtx721036_ToChanged(void* ptr, struct Moc_PackedString to);
struct Moc_PackedString ApproveTxCtx721036_ToWarning(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_ToWarningDefault(void* ptr);
void ApproveTxCtx721036_SetToWarning(void* ptr, struct Moc_PackedString toWarning);
void ApproveTxCtx721036_SetToWarningDefault(void* ptr, struct Moc_PackedString toWarning);
void ApproveTxCtx721036_ConnectToWarningChanged(void* ptr);
void ApproveTxCtx721036_DisconnectToWarningChanged(void* ptr);
void ApproveTxCtx721036_ToWarningChanged(void* ptr, struct Moc_PackedString toWarning);
char ApproveTxCtx721036_IsToVisible(void* ptr);
char ApproveTxCtx721036_IsToVisibleDefault(void* ptr);
void ApproveTxCtx721036_SetToVisible(void* ptr, char toVisible);
void ApproveTxCtx721036_SetToVisibleDefault(void* ptr, char toVisible);
void ApproveTxCtx721036_ConnectToVisibleChanged(void* ptr);
void ApproveTxCtx721036_DisconnectToVisibleChanged(void* ptr);
void ApproveTxCtx721036_ToVisibleChanged(void* ptr, char toVisible);
struct Moc_PackedString ApproveTxCtx721036_Gas(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_GasDefault(void* ptr);
void ApproveTxCtx721036_SetGas(void* ptr, struct Moc_PackedString gas);
void ApproveTxCtx721036_SetGasDefault(void* ptr, struct Moc_PackedString gas);
void ApproveTxCtx721036_ConnectGasChanged(void* ptr);
void ApproveTxCtx721036_DisconnectGasChanged(void* ptr);
void ApproveTxCtx721036_GasChanged(void* ptr, struct Moc_PackedString gas);
struct Moc_PackedString ApproveTxCtx721036_GasPrice(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_GasPriceDefault(void* ptr);
void ApproveTxCtx721036_SetGasPrice(void* ptr, struct Moc_PackedString gasPrice);
void ApproveTxCtx721036_SetGasPriceDefault(void* ptr, struct Moc_PackedString gasPrice);
void ApproveTxCtx721036_ConnectGasPriceChanged(void* ptr);
void ApproveTxCtx721036_DisconnectGasPriceChanged(void* ptr);
void ApproveTxCtx721036_GasPriceChanged(void* ptr, struct Moc_PackedString gasPrice);
double ApproveTxCtx721036_GasPriceUnit(void* ptr);
double ApproveTxCtx721036_GasPriceUnitDefault(void* ptr);
void ApproveTxCtx721036_SetGasPriceUnit(void* ptr, double gasPriceUnit);
void ApproveTxCtx721036_SetGasPriceUnitDefault(void* ptr, double gasPriceUnit);
void ApproveTxCtx721036_ConnectGasPriceUnitChanged(void* ptr);
void ApproveTxCtx721036_DisconnectGasPriceUnitChanged(void* ptr);
void ApproveTxCtx721036_GasPriceUnitChanged(void* ptr, double gasPriceUnit);
struct Moc_PackedString ApproveTxCtx721036_Nonce(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_NonceDefault(void* ptr);
void ApproveTxCtx721036_SetNonce(void* ptr, struct Moc_PackedString nonce);
void ApproveTxCtx721036_SetNonceDefault(void* ptr, struct Moc_PackedString nonce);
void ApproveTxCtx721036_ConnectNonceChanged(void* ptr);
void ApproveTxCtx721036_DisconnectNonceChanged(void* ptr);
void ApproveTxCtx721036_NonceChanged(void* ptr, struct Moc_PackedString nonce);
struct Moc_PackedString ApproveTxCtx721036_Value(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_ValueDefault(void* ptr);
void ApproveTxCtx721036_SetValue(void* ptr, struct Moc_PackedString value);
void ApproveTxCtx721036_SetValueDefault(void* ptr, struct Moc_PackedString value);
void ApproveTxCtx721036_ConnectValueChanged(void* ptr);
void ApproveTxCtx721036_DisconnectValueChanged(void* ptr);
void ApproveTxCtx721036_ValueChanged(void* ptr, struct Moc_PackedString value);
struct Moc_PackedString ApproveTxCtx721036_Password(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_PasswordDefault(void* ptr);
void ApproveTxCtx721036_SetPassword(void* ptr, struct Moc_PackedString password);
void ApproveTxCtx721036_SetPasswordDefault(void* ptr, struct Moc_PackedString password);
void ApproveTxCtx721036_ConnectPasswordChanged(void* ptr);
void ApproveTxCtx721036_DisconnectPasswordChanged(void* ptr);
void ApproveTxCtx721036_PasswordChanged(void* ptr, struct Moc_PackedString password);
struct Moc_PackedString ApproveTxCtx721036_FromSrc(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_FromSrcDefault(void* ptr);
void ApproveTxCtx721036_SetFromSrc(void* ptr, struct Moc_PackedString fromSrc);
void ApproveTxCtx721036_SetFromSrcDefault(void* ptr, struct Moc_PackedString fromSrc);
void ApproveTxCtx721036_ConnectFromSrcChanged(void* ptr);
void ApproveTxCtx721036_DisconnectFromSrcChanged(void* ptr);
void ApproveTxCtx721036_FromSrcChanged(void* ptr, struct Moc_PackedString fromSrc);
struct Moc_PackedString ApproveTxCtx721036_ToSrc(void* ptr);
struct Moc_PackedString ApproveTxCtx721036_ToSrcDefault(void* ptr);
void ApproveTxCtx721036_SetToSrc(void* ptr, struct Moc_PackedString toSrc);
void ApproveTxCtx721036_SetToSrcDefault(void* ptr, struct Moc_PackedString toSrc);
void ApproveTxCtx721036_ConnectToSrcChanged(void* ptr);
void ApproveTxCtx721036_DisconnectToSrcChanged(void* ptr);
void ApproveTxCtx721036_ToSrcChanged(void* ptr, struct Moc_PackedString toSrc);
int ApproveTxCtx721036_ApproveTxCtx721036_QRegisterMetaType();
int ApproveTxCtx721036_ApproveTxCtx721036_QRegisterMetaType2(char* typeName);
int ApproveTxCtx721036_ApproveTxCtx721036_QmlRegisterType();
int ApproveTxCtx721036_ApproveTxCtx721036_QmlRegisterType2(char* uri, int versionMajor, int versionMinor, char* qmlName);
void* ApproveTxCtx721036___dynamicPropertyNames_atList(void* ptr, int i);
void ApproveTxCtx721036___dynamicPropertyNames_setList(void* ptr, void* i);
void* ApproveTxCtx721036___dynamicPropertyNames_newList(void* ptr);
void* ApproveTxCtx721036___findChildren_atList2(void* ptr, int i);
void ApproveTxCtx721036___findChildren_setList2(void* ptr, void* i);
void* ApproveTxCtx721036___findChildren_newList2(void* ptr);
void* ApproveTxCtx721036___findChildren_atList3(void* ptr, int i);
void ApproveTxCtx721036___findChildren_setList3(void* ptr, void* i);
void* ApproveTxCtx721036___findChildren_newList3(void* ptr);
void* ApproveTxCtx721036___findChildren_atList(void* ptr, int i);
void ApproveTxCtx721036___findChildren_setList(void* ptr, void* i);
void* ApproveTxCtx721036___findChildren_newList(void* ptr);
void* ApproveTxCtx721036___children_atList(void* ptr, int i);
void ApproveTxCtx721036___children_setList(void* ptr, void* i);
void* ApproveTxCtx721036___children_newList(void* ptr);
void* ApproveTxCtx721036_NewApproveTxCtx(void* parent);
void ApproveTxCtx721036_DestroyApproveTxCtx(void* ptr);
void ApproveTxCtx721036_DestroyApproveTxCtxDefault(void* ptr);
char ApproveTxCtx721036_EventDefault(void* ptr, void* e);
char ApproveTxCtx721036_EventFilterDefault(void* ptr, void* watched, void* event);
void ApproveTxCtx721036_ChildEventDefault(void* ptr, void* event);
void ApproveTxCtx721036_ConnectNotifyDefault(void* ptr, void* sign);
void ApproveTxCtx721036_CustomEventDefault(void* ptr, void* event);
void ApproveTxCtx721036_DeleteLaterDefault(void* ptr);
void ApproveTxCtx721036_DisconnectNotifyDefault(void* ptr, void* sign);
void ApproveTxCtx721036_TimerEventDefault(void* ptr, void* event);
;
void CustomListModel721036_ConnectClear(void* ptr);
void CustomListModel721036_DisconnectClear(void* ptr);
void CustomListModel721036_Clear(void* ptr);
void CustomListModel721036_ConnectAdd(void* ptr);
void CustomListModel721036_DisconnectAdd(void* ptr);
void CustomListModel721036_Add(void* ptr, uintptr_t account);
int CustomListModel721036_CustomListModel721036_QRegisterMetaType();
int CustomListModel721036_CustomListModel721036_QRegisterMetaType2(char* typeName);
int CustomListModel721036_CustomListModel721036_QmlRegisterType();
int CustomListModel721036_CustomListModel721036_QmlRegisterType2(char* uri, int versionMajor, int versionMinor, char* qmlName);
int CustomListModel721036_____setItemData_roles_keyList_atList(void* ptr, int i);
void CustomListModel721036_____setItemData_roles_keyList_setList(void* ptr, int i);
void* CustomListModel721036_____setItemData_roles_keyList_newList(void* ptr);
int CustomListModel721036_____roleNames_keyList_atList(void* ptr, int i);
void CustomListModel721036_____roleNames_keyList_setList(void* ptr, int i);
void* CustomListModel721036_____roleNames_keyList_newList(void* ptr);
int CustomListModel721036_____itemData_keyList_atList(void* ptr, int i);
void CustomListModel721036_____itemData_keyList_setList(void* ptr, int i);
void* CustomListModel721036_____itemData_keyList_newList(void* ptr);
void* CustomListModel721036___setItemData_roles_atList(void* ptr, int v, int i);
void CustomListModel721036___setItemData_roles_setList(void* ptr, int key, void* i);
void* CustomListModel721036___setItemData_roles_newList(void* ptr);
struct Moc_PackedList CustomListModel721036___setItemData_roles_keyList(void* ptr);
void* CustomListModel721036___changePersistentIndexList_from_atList(void* ptr, int i);
void CustomListModel721036___changePersistentIndexList_from_setList(void* ptr, void* i);
void* CustomListModel721036___changePersistentIndexList_from_newList(void* ptr);
void* CustomListModel721036___changePersistentIndexList_to_atList(void* ptr, int i);
void CustomListModel721036___changePersistentIndexList_to_setList(void* ptr, void* i);
void* CustomListModel721036___changePersistentIndexList_to_newList(void* ptr);
int CustomListModel721036___dataChanged_roles_atList(void* ptr, int i);
void CustomListModel721036___dataChanged_roles_setList(void* ptr, int i);
void* CustomListModel721036___dataChanged_roles_newList(void* ptr);
void* CustomListModel721036___layoutAboutToBeChanged_parents_atList(void* ptr, int i);
void CustomListModel721036___layoutAboutToBeChanged_parents_setList(void* ptr, void* i);
void* CustomListModel721036___layoutAboutToBeChanged_parents_newList(void* ptr);
void* CustomListModel721036___layoutChanged_parents_atList(void* ptr, int i);
void CustomListModel721036___layoutChanged_parents_setList(void* ptr, void* i);
void* CustomListModel721036___layoutChanged_parents_newList(void* ptr);
void* CustomListModel721036___roleNames_atList(void* ptr, int v, int i);
void CustomListModel721036___roleNames_setList(void* ptr, int key, void* i);
void* CustomListModel721036___roleNames_newList(void* ptr);
struct Moc_PackedList CustomListModel721036___roleNames_keyList(void* ptr);
void* CustomListModel721036___itemData_atList(void* ptr, int v, int i);
void CustomListModel721036___itemData_setList(void* ptr, int key, void* i);
void* CustomListModel721036___itemData_newList(void* ptr);
struct Moc_PackedList CustomListModel721036___itemData_keyList(void* ptr);
void* CustomListModel721036___mimeData_indexes_atList(void* ptr, int i);
void CustomListModel721036___mimeData_indexes_setList(void* ptr, void* i);
void* CustomListModel721036___mimeData_indexes_newList(void* ptr);
void* CustomListModel721036___match_atList(void* ptr, int i);
void CustomListModel721036___match_setList(void* ptr, void* i);
void* CustomListModel721036___match_newList(void* ptr);
void* CustomListModel721036___persistentIndexList_atList(void* ptr, int i);
void CustomListModel721036___persistentIndexList_setList(void* ptr, void* i);
void* CustomListModel721036___persistentIndexList_newList(void* ptr);
int CustomListModel721036_____doSetRoleNames_roleNames_keyList_atList(void* ptr, int i);
void CustomListModel721036_____doSetRoleNames_roleNames_keyList_setList(void* ptr, int i);
void* CustomListModel721036_____doSetRoleNames_roleNames_keyList_newList(void* ptr);
int CustomListModel721036_____setRoleNames_roleNames_keyList_atList(void* ptr, int i);
void CustomListModel721036_____setRoleNames_roleNames_keyList_setList(void* ptr, int i);
void* CustomListModel721036_____setRoleNames_roleNames_keyList_newList(void* ptr);
void* CustomListModel721036___dynamicPropertyNames_atList(void* ptr, int i);
void CustomListModel721036___dynamicPropertyNames_setList(void* ptr, void* i);
void* CustomListModel721036___dynamicPropertyNames_newList(void* ptr);
void* CustomListModel721036___findChildren_atList2(void* ptr, int i);
void CustomListModel721036___findChildren_setList2(void* ptr, void* i);
void* CustomListModel721036___findChildren_newList2(void* ptr);
void* CustomListModel721036___findChildren_atList3(void* ptr, int i);
void CustomListModel721036___findChildren_setList3(void* ptr, void* i);
void* CustomListModel721036___findChildren_newList3(void* ptr);
void* CustomListModel721036___findChildren_atList(void* ptr, int i);
void CustomListModel721036___findChildren_setList(void* ptr, void* i);
void* CustomListModel721036___findChildren_newList(void* ptr);
void* CustomListModel721036___children_atList(void* ptr, int i);
void CustomListModel721036___children_setList(void* ptr, void* i);
void* CustomListModel721036___children_newList(void* ptr);
void* CustomListModel721036_NewCustomListModel(void* parent);
void CustomListModel721036_DestroyCustomListModel(void* ptr);
void CustomListModel721036_DestroyCustomListModelDefault(void* ptr);
char CustomListModel721036_DropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
void* CustomListModel721036_IndexDefault(void* ptr, int row, int column, void* parent);
void* CustomListModel721036_SiblingDefault(void* ptr, int row, int column, void* idx);
long long CustomListModel721036_FlagsDefault(void* ptr, void* index);
;
char CustomListModel721036_InsertColumnsDefault(void* ptr, int column, int count, void* parent);
char CustomListModel721036_InsertRowsDefault(void* ptr, int row, int count, void* parent);
char CustomListModel721036_MoveColumnsDefault(void* ptr, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
char CustomListModel721036_MoveRowsDefault(void* ptr, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
char CustomListModel721036_RemoveColumnsDefault(void* ptr, int column, int count, void* parent);
char CustomListModel721036_RemoveRowsDefault(void* ptr, int row, int count, void* parent);
char CustomListModel721036_SetDataDefault(void* ptr, void* index, void* value, int role);
char CustomListModel721036_SetHeaderDataDefault(void* ptr, int section, long long orientation, void* value, int role);
char CustomListModel721036_SetItemDataDefault(void* ptr, void* index, void* roles);
char CustomListModel721036_SubmitDefault(void* ptr);
void CustomListModel721036_FetchMoreDefault(void* ptr, void* parent);
void CustomListModel721036_ResetInternalDataDefault(void* ptr);
void CustomListModel721036_RevertDefault(void* ptr);
void CustomListModel721036_SortDefault(void* ptr, int column, long long order);
struct Moc_PackedList CustomListModel721036_RoleNamesDefault(void* ptr);
struct Moc_PackedList CustomListModel721036_ItemDataDefault(void* ptr, void* index);
void* CustomListModel721036_MimeDataDefault(void* ptr, void* indexes);
void* CustomListModel721036_BuddyDefault(void* ptr, void* index);
void* CustomListModel721036_ParentDefault(void* ptr, void* index);
struct Moc_PackedList CustomListModel721036_MatchDefault(void* ptr, void* start, int role, void* value, int hits, long long flags);
void* CustomListModel721036_SpanDefault(void* ptr, void* index);
struct Moc_PackedString CustomListModel721036_MimeTypesDefault(void* ptr);
void* CustomListModel721036_DataDefault(void* ptr, void* index, int role);
void* CustomListModel721036_HeaderDataDefault(void* ptr, int section, long long orientation, int role);
long long CustomListModel721036_SupportedDragActionsDefault(void* ptr);
long long CustomListModel721036_SupportedDropActionsDefault(void* ptr);
char CustomListModel721036_CanDropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
char CustomListModel721036_CanFetchMoreDefault(void* ptr, void* parent);
char CustomListModel721036_HasChildrenDefault(void* ptr, void* parent);
int CustomListModel721036_ColumnCountDefault(void* ptr, void* parent);
int CustomListModel721036_RowCountDefault(void* ptr, void* parent);
char CustomListModel721036_EventDefault(void* ptr, void* e);
char CustomListModel721036_EventFilterDefault(void* ptr, void* watched, void* event);
void CustomListModel721036_ChildEventDefault(void* ptr, void* event);
void CustomListModel721036_ConnectNotifyDefault(void* ptr, void* sign);
void CustomListModel721036_CustomEventDefault(void* ptr, void* event);
void CustomListModel721036_DeleteLaterDefault(void* ptr);
void CustomListModel721036_DisconnectNotifyDefault(void* ptr, void* sign);
void CustomListModel721036_TimerEventDefault(void* ptr, void* event);
void TxListAccountsModel721036_ConnectAdd(void* ptr);
void TxListAccountsModel721036_DisconnectAdd(void* ptr);
void TxListAccountsModel721036_Add(void* ptr, struct Moc_PackedString tx);
int TxListAccountsModel721036_TxListAccountsModel721036_QRegisterMetaType();
int TxListAccountsModel721036_TxListAccountsModel721036_QRegisterMetaType2(char* typeName);
int TxListAccountsModel721036_TxListAccountsModel721036_QmlRegisterType();
int TxListAccountsModel721036_TxListAccountsModel721036_QmlRegisterType2(char* uri, int versionMajor, int versionMinor, char* qmlName);
int TxListAccountsModel721036_____setItemData_roles_keyList_atList(void* ptr, int i);
void TxListAccountsModel721036_____setItemData_roles_keyList_setList(void* ptr, int i);
void* TxListAccountsModel721036_____setItemData_roles_keyList_newList(void* ptr);
int TxListAccountsModel721036_____roleNames_keyList_atList(void* ptr, int i);
void TxListAccountsModel721036_____roleNames_keyList_setList(void* ptr, int i);
void* TxListAccountsModel721036_____roleNames_keyList_newList(void* ptr);
int TxListAccountsModel721036_____itemData_keyList_atList(void* ptr, int i);
void TxListAccountsModel721036_____itemData_keyList_setList(void* ptr, int i);
void* TxListAccountsModel721036_____itemData_keyList_newList(void* ptr);
void* TxListAccountsModel721036___setItemData_roles_atList(void* ptr, int v, int i);
void TxListAccountsModel721036___setItemData_roles_setList(void* ptr, int key, void* i);
void* TxListAccountsModel721036___setItemData_roles_newList(void* ptr);
struct Moc_PackedList TxListAccountsModel721036___setItemData_roles_keyList(void* ptr);
void* TxListAccountsModel721036___changePersistentIndexList_from_atList(void* ptr, int i);
void TxListAccountsModel721036___changePersistentIndexList_from_setList(void* ptr, void* i);
void* TxListAccountsModel721036___changePersistentIndexList_from_newList(void* ptr);
void* TxListAccountsModel721036___changePersistentIndexList_to_atList(void* ptr, int i);
void TxListAccountsModel721036___changePersistentIndexList_to_setList(void* ptr, void* i);
void* TxListAccountsModel721036___changePersistentIndexList_to_newList(void* ptr);
int TxListAccountsModel721036___dataChanged_roles_atList(void* ptr, int i);
void TxListAccountsModel721036___dataChanged_roles_setList(void* ptr, int i);
void* TxListAccountsModel721036___dataChanged_roles_newList(void* ptr);
void* TxListAccountsModel721036___layoutAboutToBeChanged_parents_atList(void* ptr, int i);
void TxListAccountsModel721036___layoutAboutToBeChanged_parents_setList(void* ptr, void* i);
void* TxListAccountsModel721036___layoutAboutToBeChanged_parents_newList(void* ptr);
void* TxListAccountsModel721036___layoutChanged_parents_atList(void* ptr, int i);
void TxListAccountsModel721036___layoutChanged_parents_setList(void* ptr, void* i);
void* TxListAccountsModel721036___layoutChanged_parents_newList(void* ptr);
void* TxListAccountsModel721036___roleNames_atList(void* ptr, int v, int i);
void TxListAccountsModel721036___roleNames_setList(void* ptr, int key, void* i);
void* TxListAccountsModel721036___roleNames_newList(void* ptr);
struct Moc_PackedList TxListAccountsModel721036___roleNames_keyList(void* ptr);
void* TxListAccountsModel721036___itemData_atList(void* ptr, int v, int i);
void TxListAccountsModel721036___itemData_setList(void* ptr, int key, void* i);
void* TxListAccountsModel721036___itemData_newList(void* ptr);
struct Moc_PackedList TxListAccountsModel721036___itemData_keyList(void* ptr);
void* TxListAccountsModel721036___mimeData_indexes_atList(void* ptr, int i);
void TxListAccountsModel721036___mimeData_indexes_setList(void* ptr, void* i);
void* TxListAccountsModel721036___mimeData_indexes_newList(void* ptr);
void* TxListAccountsModel721036___match_atList(void* ptr, int i);
void TxListAccountsModel721036___match_setList(void* ptr, void* i);
void* TxListAccountsModel721036___match_newList(void* ptr);
void* TxListAccountsModel721036___persistentIndexList_atList(void* ptr, int i);
void TxListAccountsModel721036___persistentIndexList_setList(void* ptr, void* i);
void* TxListAccountsModel721036___persistentIndexList_newList(void* ptr);
int TxListAccountsModel721036_____doSetRoleNames_roleNames_keyList_atList(void* ptr, int i);
void TxListAccountsModel721036_____doSetRoleNames_roleNames_keyList_setList(void* ptr, int i);
void* TxListAccountsModel721036_____doSetRoleNames_roleNames_keyList_newList(void* ptr);
int TxListAccountsModel721036_____setRoleNames_roleNames_keyList_atList(void* ptr, int i);
void TxListAccountsModel721036_____setRoleNames_roleNames_keyList_setList(void* ptr, int i);
void* TxListAccountsModel721036_____setRoleNames_roleNames_keyList_newList(void* ptr);
void* TxListAccountsModel721036___dynamicPropertyNames_atList(void* ptr, int i);
void TxListAccountsModel721036___dynamicPropertyNames_setList(void* ptr, void* i);
void* TxListAccountsModel721036___dynamicPropertyNames_newList(void* ptr);
void* TxListAccountsModel721036___findChildren_atList2(void* ptr, int i);
void TxListAccountsModel721036___findChildren_setList2(void* ptr, void* i);
void* TxListAccountsModel721036___findChildren_newList2(void* ptr);
void* TxListAccountsModel721036___findChildren_atList3(void* ptr, int i);
void TxListAccountsModel721036___findChildren_setList3(void* ptr, void* i);
void* TxListAccountsModel721036___findChildren_newList3(void* ptr);
void* TxListAccountsModel721036___findChildren_atList(void* ptr, int i);
void TxListAccountsModel721036___findChildren_setList(void* ptr, void* i);
void* TxListAccountsModel721036___findChildren_newList(void* ptr);
void* TxListAccountsModel721036___children_atList(void* ptr, int i);
void TxListAccountsModel721036___children_setList(void* ptr, void* i);
void* TxListAccountsModel721036___children_newList(void* ptr);
void* TxListAccountsModel721036_NewTxListAccountsModel(void* parent);
void TxListAccountsModel721036_DestroyTxListAccountsModel(void* ptr);
void TxListAccountsModel721036_DestroyTxListAccountsModelDefault(void* ptr);
char TxListAccountsModel721036_DropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
void* TxListAccountsModel721036_IndexDefault(void* ptr, int row, int column, void* parent);
void* TxListAccountsModel721036_SiblingDefault(void* ptr, int row, int column, void* idx);
long long TxListAccountsModel721036_FlagsDefault(void* ptr, void* index);
;
char TxListAccountsModel721036_InsertColumnsDefault(void* ptr, int column, int count, void* parent);
char TxListAccountsModel721036_InsertRowsDefault(void* ptr, int row, int count, void* parent);
char TxListAccountsModel721036_MoveColumnsDefault(void* ptr, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
char TxListAccountsModel721036_MoveRowsDefault(void* ptr, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
char TxListAccountsModel721036_RemoveColumnsDefault(void* ptr, int column, int count, void* parent);
char TxListAccountsModel721036_RemoveRowsDefault(void* ptr, int row, int count, void* parent);
char TxListAccountsModel721036_SetDataDefault(void* ptr, void* index, void* value, int role);
char TxListAccountsModel721036_SetHeaderDataDefault(void* ptr, int section, long long orientation, void* value, int role);
char TxListAccountsModel721036_SetItemDataDefault(void* ptr, void* index, void* roles);
char TxListAccountsModel721036_SubmitDefault(void* ptr);
void TxListAccountsModel721036_FetchMoreDefault(void* ptr, void* parent);
void TxListAccountsModel721036_ResetInternalDataDefault(void* ptr);
void TxListAccountsModel721036_RevertDefault(void* ptr);
void TxListAccountsModel721036_SortDefault(void* ptr, int column, long long order);
struct Moc_PackedList TxListAccountsModel721036_RoleNamesDefault(void* ptr);
struct Moc_PackedList TxListAccountsModel721036_ItemDataDefault(void* ptr, void* index);
void* TxListAccountsModel721036_MimeDataDefault(void* ptr, void* indexes);
void* TxListAccountsModel721036_BuddyDefault(void* ptr, void* index);
void* TxListAccountsModel721036_ParentDefault(void* ptr, void* index);
struct Moc_PackedList TxListAccountsModel721036_MatchDefault(void* ptr, void* start, int role, void* value, int hits, long long flags);
void* TxListAccountsModel721036_SpanDefault(void* ptr, void* index);
struct Moc_PackedString TxListAccountsModel721036_MimeTypesDefault(void* ptr);
void* TxListAccountsModel721036_DataDefault(void* ptr, void* index, int role);
void* TxListAccountsModel721036_HeaderDataDefault(void* ptr, int section, long long orientation, int role);
long long TxListAccountsModel721036_SupportedDragActionsDefault(void* ptr);
long long TxListAccountsModel721036_SupportedDropActionsDefault(void* ptr);
char TxListAccountsModel721036_CanDropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
char TxListAccountsModel721036_CanFetchMoreDefault(void* ptr, void* parent);
char TxListAccountsModel721036_HasChildrenDefault(void* ptr, void* parent);
int TxListAccountsModel721036_ColumnCountDefault(void* ptr, void* parent);
int TxListAccountsModel721036_RowCountDefault(void* ptr, void* parent);
char TxListAccountsModel721036_EventDefault(void* ptr, void* e);
char TxListAccountsModel721036_EventFilterDefault(void* ptr, void* watched, void* event);
void TxListAccountsModel721036_ChildEventDefault(void* ptr, void* event);
void TxListAccountsModel721036_ConnectNotifyDefault(void* ptr, void* sign);
void TxListAccountsModel721036_CustomEventDefault(void* ptr, void* event);
void TxListAccountsModel721036_DeleteLaterDefault(void* ptr);
void TxListAccountsModel721036_DisconnectNotifyDefault(void* ptr, void* sign);
void TxListAccountsModel721036_TimerEventDefault(void* ptr, void* event);
void TxListModel721036_ConnectClear(void* ptr);
void TxListModel721036_DisconnectClear(void* ptr);
void TxListModel721036_Clear(void* ptr);
void TxListModel721036_ConnectAdd(void* ptr);
void TxListModel721036_DisconnectAdd(void* ptr);
void TxListModel721036_Add(void* ptr, uintptr_t tx);
void TxListModel721036_ConnectRemove(void* ptr);
void TxListModel721036_DisconnectRemove(void* ptr);
void TxListModel721036_Remove(void* ptr, int i);
char TxListModel721036_IsEmpty(void* ptr);
char TxListModel721036_IsEmptyDefault(void* ptr);
void TxListModel721036_SetIsEmpty(void* ptr, char isEmpty);
void TxListModel721036_SetIsEmptyDefault(void* ptr, char isEmpty);
void TxListModel721036_ConnectIsEmptyChanged(void* ptr);
void TxListModel721036_DisconnectIsEmptyChanged(void* ptr);
void TxListModel721036_IsEmptyChanged(void* ptr, char isEmpty);
struct Moc_PackedString TxListModel721036_SelectedAddress(void* ptr);
struct Moc_PackedString TxListModel721036_SelectedAddressDefault(void* ptr);
void TxListModel721036_SetSelectedAddress(void* ptr, struct Moc_PackedString selectedAddress);
void TxListModel721036_SetSelectedAddressDefault(void* ptr, struct Moc_PackedString selectedAddress);
void TxListModel721036_ConnectSelectedAddressChanged(void* ptr);
void TxListModel721036_DisconnectSelectedAddressChanged(void* ptr);
void TxListModel721036_SelectedAddressChanged(void* ptr, struct Moc_PackedString selectedAddress);
int TxListModel721036_TxListModel721036_QRegisterMetaType();
int TxListModel721036_TxListModel721036_QRegisterMetaType2(char* typeName);
int TxListModel721036_TxListModel721036_QmlRegisterType();
int TxListModel721036_TxListModel721036_QmlRegisterType2(char* uri, int versionMajor, int versionMinor, char* qmlName);
int TxListModel721036_____setItemData_roles_keyList_atList(void* ptr, int i);
void TxListModel721036_____setItemData_roles_keyList_setList(void* ptr, int i);
void* TxListModel721036_____setItemData_roles_keyList_newList(void* ptr);
int TxListModel721036_____roleNames_keyList_atList(void* ptr, int i);
void TxListModel721036_____roleNames_keyList_setList(void* ptr, int i);
void* TxListModel721036_____roleNames_keyList_newList(void* ptr);
int TxListModel721036_____itemData_keyList_atList(void* ptr, int i);
void TxListModel721036_____itemData_keyList_setList(void* ptr, int i);
void* TxListModel721036_____itemData_keyList_newList(void* ptr);
void* TxListModel721036___setItemData_roles_atList(void* ptr, int v, int i);
void TxListModel721036___setItemData_roles_setList(void* ptr, int key, void* i);
void* TxListModel721036___setItemData_roles_newList(void* ptr);
struct Moc_PackedList TxListModel721036___setItemData_roles_keyList(void* ptr);
void* TxListModel721036___changePersistentIndexList_from_atList(void* ptr, int i);
void TxListModel721036___changePersistentIndexList_from_setList(void* ptr, void* i);
void* TxListModel721036___changePersistentIndexList_from_newList(void* ptr);
void* TxListModel721036___changePersistentIndexList_to_atList(void* ptr, int i);
void TxListModel721036___changePersistentIndexList_to_setList(void* ptr, void* i);
void* TxListModel721036___changePersistentIndexList_to_newList(void* ptr);
int TxListModel721036___dataChanged_roles_atList(void* ptr, int i);
void TxListModel721036___dataChanged_roles_setList(void* ptr, int i);
void* TxListModel721036___dataChanged_roles_newList(void* ptr);
void* TxListModel721036___layoutAboutToBeChanged_parents_atList(void* ptr, int i);
void TxListModel721036___layoutAboutToBeChanged_parents_setList(void* ptr, void* i);
void* TxListModel721036___layoutAboutToBeChanged_parents_newList(void* ptr);
void* TxListModel721036___layoutChanged_parents_atList(void* ptr, int i);
void TxListModel721036___layoutChanged_parents_setList(void* ptr, void* i);
void* TxListModel721036___layoutChanged_parents_newList(void* ptr);
void* TxListModel721036___roleNames_atList(void* ptr, int v, int i);
void TxListModel721036___roleNames_setList(void* ptr, int key, void* i);
void* TxListModel721036___roleNames_newList(void* ptr);
struct Moc_PackedList TxListModel721036___roleNames_keyList(void* ptr);
void* TxListModel721036___itemData_atList(void* ptr, int v, int i);
void TxListModel721036___itemData_setList(void* ptr, int key, void* i);
void* TxListModel721036___itemData_newList(void* ptr);
struct Moc_PackedList TxListModel721036___itemData_keyList(void* ptr);
void* TxListModel721036___mimeData_indexes_atList(void* ptr, int i);
void TxListModel721036___mimeData_indexes_setList(void* ptr, void* i);
void* TxListModel721036___mimeData_indexes_newList(void* ptr);
void* TxListModel721036___match_atList(void* ptr, int i);
void TxListModel721036___match_setList(void* ptr, void* i);
void* TxListModel721036___match_newList(void* ptr);
void* TxListModel721036___persistentIndexList_atList(void* ptr, int i);
void TxListModel721036___persistentIndexList_setList(void* ptr, void* i);
void* TxListModel721036___persistentIndexList_newList(void* ptr);
int TxListModel721036_____doSetRoleNames_roleNames_keyList_atList(void* ptr, int i);
void TxListModel721036_____doSetRoleNames_roleNames_keyList_setList(void* ptr, int i);
void* TxListModel721036_____doSetRoleNames_roleNames_keyList_newList(void* ptr);
int TxListModel721036_____setRoleNames_roleNames_keyList_atList(void* ptr, int i);
void TxListModel721036_____setRoleNames_roleNames_keyList_setList(void* ptr, int i);
void* TxListModel721036_____setRoleNames_roleNames_keyList_newList(void* ptr);
void* TxListModel721036___dynamicPropertyNames_atList(void* ptr, int i);
void TxListModel721036___dynamicPropertyNames_setList(void* ptr, void* i);
void* TxListModel721036___dynamicPropertyNames_newList(void* ptr);
void* TxListModel721036___findChildren_atList2(void* ptr, int i);
void TxListModel721036___findChildren_setList2(void* ptr, void* i);
void* TxListModel721036___findChildren_newList2(void* ptr);
void* TxListModel721036___findChildren_atList3(void* ptr, int i);
void TxListModel721036___findChildren_setList3(void* ptr, void* i);
void* TxListModel721036___findChildren_newList3(void* ptr);
void* TxListModel721036___findChildren_atList(void* ptr, int i);
void TxListModel721036___findChildren_setList(void* ptr, void* i);
void* TxListModel721036___findChildren_newList(void* ptr);
void* TxListModel721036___children_atList(void* ptr, int i);
void TxListModel721036___children_setList(void* ptr, void* i);
void* TxListModel721036___children_newList(void* ptr);
void* TxListModel721036_NewTxListModel(void* parent);
void TxListModel721036_DestroyTxListModel(void* ptr);
void TxListModel721036_DestroyTxListModelDefault(void* ptr);
char TxListModel721036_DropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
void* TxListModel721036_IndexDefault(void* ptr, int row, int column, void* parent);
void* TxListModel721036_SiblingDefault(void* ptr, int row, int column, void* idx);
long long TxListModel721036_FlagsDefault(void* ptr, void* index);
;
char TxListModel721036_InsertColumnsDefault(void* ptr, int column, int count, void* parent);
char TxListModel721036_InsertRowsDefault(void* ptr, int row, int count, void* parent);
char TxListModel721036_MoveColumnsDefault(void* ptr, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
char TxListModel721036_MoveRowsDefault(void* ptr, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
char TxListModel721036_RemoveColumnsDefault(void* ptr, int column, int count, void* parent);
char TxListModel721036_RemoveRowsDefault(void* ptr, int row, int count, void* parent);
char TxListModel721036_SetDataDefault(void* ptr, void* index, void* value, int role);
char TxListModel721036_SetHeaderDataDefault(void* ptr, int section, long long orientation, void* value, int role);
char TxListModel721036_SetItemDataDefault(void* ptr, void* index, void* roles);
char TxListModel721036_SubmitDefault(void* ptr);
void TxListModel721036_FetchMoreDefault(void* ptr, void* parent);
void TxListModel721036_ResetInternalDataDefault(void* ptr);
void TxListModel721036_RevertDefault(void* ptr);
void TxListModel721036_SortDefault(void* ptr, int column, long long order);
struct Moc_PackedList TxListModel721036_RoleNamesDefault(void* ptr);
struct Moc_PackedList TxListModel721036_ItemDataDefault(void* ptr, void* index);
void* TxListModel721036_MimeDataDefault(void* ptr, void* indexes);
void* TxListModel721036_BuddyDefault(void* ptr, void* index);
void* TxListModel721036_ParentDefault(void* ptr, void* index);
struct Moc_PackedList TxListModel721036_MatchDefault(void* ptr, void* start, int role, void* value, int hits, long long flags);
void* TxListModel721036_SpanDefault(void* ptr, void* index);
struct Moc_PackedString TxListModel721036_MimeTypesDefault(void* ptr);
void* TxListModel721036_DataDefault(void* ptr, void* index, int role);
void* TxListModel721036_HeaderDataDefault(void* ptr, int section, long long orientation, int role);
long long TxListModel721036_SupportedDragActionsDefault(void* ptr);
long long TxListModel721036_SupportedDropActionsDefault(void* ptr);
char TxListModel721036_CanDropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
char TxListModel721036_CanFetchMoreDefault(void* ptr, void* parent);
char TxListModel721036_HasChildrenDefault(void* ptr, void* parent);
int TxListModel721036_ColumnCountDefault(void* ptr, void* parent);
int TxListModel721036_RowCountDefault(void* ptr, void* parent);
char TxListModel721036_EventDefault(void* ptr, void* e);
char TxListModel721036_EventFilterDefault(void* ptr, void* watched, void* event);
void TxListModel721036_ChildEventDefault(void* ptr, void* event);
void TxListModel721036_ConnectNotifyDefault(void* ptr, void* sign);
void TxListModel721036_CustomEventDefault(void* ptr, void* event);
void TxListModel721036_DeleteLaterDefault(void* ptr);
void TxListModel721036_DisconnectNotifyDefault(void* ptr, void* sign);
void TxListModel721036_TimerEventDefault(void* ptr, void* event);
void ApproveImportCtx721036_ConnectClicked(void* ptr);
void ApproveImportCtx721036_DisconnectClicked(void* ptr);
void ApproveImportCtx721036_Clicked(void* ptr, int b);
void ApproveImportCtx721036_ConnectBack(void* ptr);
void ApproveImportCtx721036_DisconnectBack(void* ptr);
void ApproveImportCtx721036_Back(void* ptr);
void ApproveImportCtx721036_ConnectPasswordEdited(void* ptr);
void ApproveImportCtx721036_DisconnectPasswordEdited(void* ptr);
void ApproveImportCtx721036_PasswordEdited(void* ptr, struct Moc_PackedString b);
void ApproveImportCtx721036_ConnectConfirmPasswordEdited(void* ptr);
void ApproveImportCtx721036_DisconnectConfirmPasswordEdited(void* ptr);
void ApproveImportCtx721036_ConfirmPasswordEdited(void* ptr, struct Moc_PackedString b);
void ApproveImportCtx721036_ConnectOldPasswordEdited(void* ptr);
void ApproveImportCtx721036_DisconnectOldPasswordEdited(void* ptr);
void ApproveImportCtx721036_OldPasswordEdited(void* ptr, struct Moc_PackedString b);
struct Moc_PackedString ApproveImportCtx721036_Remote(void* ptr);
struct Moc_PackedString ApproveImportCtx721036_RemoteDefault(void* ptr);
void ApproveImportCtx721036_SetRemote(void* ptr, struct Moc_PackedString remote);
void ApproveImportCtx721036_SetRemoteDefault(void* ptr, struct Moc_PackedString remote);
void ApproveImportCtx721036_ConnectRemoteChanged(void* ptr);
void ApproveImportCtx721036_DisconnectRemoteChanged(void* ptr);
void ApproveImportCtx721036_RemoteChanged(void* ptr, struct Moc_PackedString remote);
struct Moc_PackedString ApproveImportCtx721036_Transport(void* ptr);
struct Moc_PackedString ApproveImportCtx721036_TransportDefault(void* ptr);
void ApproveImportCtx721036_SetTransport(void* ptr, struct Moc_PackedString transport);
void ApproveImportCtx721036_SetTransportDefault(void* ptr, struct Moc_PackedString transport);
void ApproveImportCtx721036_ConnectTransportChanged(void* ptr);
void ApproveImportCtx721036_DisconnectTransportChanged(void* ptr);
void ApproveImportCtx721036_TransportChanged(void* ptr, struct Moc_PackedString transport);
struct Moc_PackedString ApproveImportCtx721036_Endpoint(void* ptr);
struct Moc_PackedString ApproveImportCtx721036_EndpointDefault(void* ptr);
void ApproveImportCtx721036_SetEndpoint(void* ptr, struct Moc_PackedString endpoint);
void ApproveImportCtx721036_SetEndpointDefault(void* ptr, struct Moc_PackedString endpoint);
void ApproveImportCtx721036_ConnectEndpointChanged(void* ptr);
void ApproveImportCtx721036_DisconnectEndpointChanged(void* ptr);
void ApproveImportCtx721036_EndpointChanged(void* ptr, struct Moc_PackedString endpoint);
struct Moc_PackedString ApproveImportCtx721036_OldPassword(void* ptr);
struct Moc_PackedString ApproveImportCtx721036_OldPasswordDefault(void* ptr);
void ApproveImportCtx721036_SetOldPassword(void* ptr, struct Moc_PackedString oldPassword);
void ApproveImportCtx721036_SetOldPasswordDefault(void* ptr, struct Moc_PackedString oldPassword);
void ApproveImportCtx721036_ConnectOldPasswordChanged(void* ptr);
void ApproveImportCtx721036_DisconnectOldPasswordChanged(void* ptr);
void ApproveImportCtx721036_OldPasswordChanged(void* ptr, struct Moc_PackedString oldPassword);
struct Moc_PackedString ApproveImportCtx721036_Password(void* ptr);
struct Moc_PackedString ApproveImportCtx721036_PasswordDefault(void* ptr);
void ApproveImportCtx721036_SetPassword(void* ptr, struct Moc_PackedString password);
void ApproveImportCtx721036_SetPasswordDefault(void* ptr, struct Moc_PackedString password);
void ApproveImportCtx721036_ConnectPasswordChanged(void* ptr);
void ApproveImportCtx721036_DisconnectPasswordChanged(void* ptr);
void ApproveImportCtx721036_PasswordChanged(void* ptr, struct Moc_PackedString password);
struct Moc_PackedString ApproveImportCtx721036_ConfirmPassword(void* ptr);
struct Moc_PackedString ApproveImportCtx721036_ConfirmPasswordDefault(void* ptr);
void ApproveImportCtx721036_SetConfirmPassword(void* ptr, struct Moc_PackedString confirmPassword);
void ApproveImportCtx721036_SetConfirmPasswordDefault(void* ptr, struct Moc_PackedString confirmPassword);
void ApproveImportCtx721036_ConnectConfirmPasswordChanged(void* ptr);
void ApproveImportCtx721036_DisconnectConfirmPasswordChanged(void* ptr);
void ApproveImportCtx721036_ConfirmPasswordChanged(void* ptr, struct Moc_PackedString confirmPassword);
int ApproveImportCtx721036_ApproveImportCtx721036_QRegisterMetaType();
int ApproveImportCtx721036_ApproveImportCtx721036_QRegisterMetaType2(char* typeName);
int ApproveImportCtx721036_ApproveImportCtx721036_QmlRegisterType();
int ApproveImportCtx721036_ApproveImportCtx721036_QmlRegisterType2(char* uri, int versionMajor, int versionMinor, char* qmlName);
void* ApproveImportCtx721036___dynamicPropertyNames_atList(void* ptr, int i);
void ApproveImportCtx721036___dynamicPropertyNames_setList(void* ptr, void* i);
void* ApproveImportCtx721036___dynamicPropertyNames_newList(void* ptr);
void* ApproveImportCtx721036___findChildren_atList2(void* ptr, int i);
void ApproveImportCtx721036___findChildren_setList2(void* ptr, void* i);
void* ApproveImportCtx721036___findChildren_newList2(void* ptr);
void* ApproveImportCtx721036___findChildren_atList3(void* ptr, int i);
void ApproveImportCtx721036___findChildren_setList3(void* ptr, void* i);
void* ApproveImportCtx721036___findChildren_newList3(void* ptr);
void* ApproveImportCtx721036___findChildren_atList(void* ptr, int i);
void ApproveImportCtx721036___findChildren_setList(void* ptr, void* i);
void* ApproveImportCtx721036___findChildren_newList(void* ptr);
void* ApproveImportCtx721036___children_atList(void* ptr, int i);
void ApproveImportCtx721036___children_setList(void* ptr, void* i);
void* ApproveImportCtx721036___children_newList(void* ptr);
void* ApproveImportCtx721036_NewApproveImportCtx(void* parent);
void ApproveImportCtx721036_DestroyApproveImportCtx(void* ptr);
void ApproveImportCtx721036_DestroyApproveImportCtxDefault(void* ptr);
char ApproveImportCtx721036_EventDefault(void* ptr, void* e);
char ApproveImportCtx721036_EventFilterDefault(void* ptr, void* watched, void* event);
void ApproveImportCtx721036_ChildEventDefault(void* ptr, void* event);
void ApproveImportCtx721036_ConnectNotifyDefault(void* ptr, void* sign);
void ApproveImportCtx721036_CustomEventDefault(void* ptr, void* event);
void ApproveImportCtx721036_DeleteLaterDefault(void* ptr);
void ApproveImportCtx721036_DisconnectNotifyDefault(void* ptr, void* sign);
void ApproveImportCtx721036_TimerEventDefault(void* ptr, void* event);
;
void ApproveListingCtx721036_ConnectClicked(void* ptr);
void ApproveListingCtx721036_DisconnectClicked(void* ptr);
void ApproveListingCtx721036_Clicked(void* ptr, int b);
void ApproveListingCtx721036_ConnectBack(void* ptr);
void ApproveListingCtx721036_DisconnectBack(void* ptr);
void ApproveListingCtx721036_Back(void* ptr);
void ApproveListingCtx721036_ConnectOnCheckStateChanged(void* ptr);
void ApproveListingCtx721036_DisconnectOnCheckStateChanged(void* ptr);
void ApproveListingCtx721036_OnCheckStateChanged(void* ptr, int i, char checked);
struct Moc_PackedString ApproveListingCtx721036_Remote(void* ptr);
struct Moc_PackedString ApproveListingCtx721036_RemoteDefault(void* ptr);
void ApproveListingCtx721036_SetRemote(void* ptr, struct Moc_PackedString remote);
void ApproveListingCtx721036_SetRemoteDefault(void* ptr, struct Moc_PackedString remote);
void ApproveListingCtx721036_ConnectRemoteChanged(void* ptr);
void ApproveListingCtx721036_DisconnectRemoteChanged(void* ptr);
void ApproveListingCtx721036_RemoteChanged(void* ptr, struct Moc_PackedString remote);
struct Moc_PackedString ApproveListingCtx721036_Transport(void* ptr);
struct Moc_PackedString ApproveListingCtx721036_TransportDefault(void* ptr);
void ApproveListingCtx721036_SetTransport(void* ptr, struct Moc_PackedString transport);
void ApproveListingCtx721036_SetTransportDefault(void* ptr, struct Moc_PackedString transport);
void ApproveListingCtx721036_ConnectTransportChanged(void* ptr);
void ApproveListingCtx721036_DisconnectTransportChanged(void* ptr);
void ApproveListingCtx721036_TransportChanged(void* ptr, struct Moc_PackedString transport);
struct Moc_PackedString ApproveListingCtx721036_Endpoint(void* ptr);
struct Moc_PackedString ApproveListingCtx721036_EndpointDefault(void* ptr);
void ApproveListingCtx721036_SetEndpoint(void* ptr, struct Moc_PackedString endpoint);
void ApproveListingCtx721036_SetEndpointDefault(void* ptr, struct Moc_PackedString endpoint);
void ApproveListingCtx721036_ConnectEndpointChanged(void* ptr);
void ApproveListingCtx721036_DisconnectEndpointChanged(void* ptr);
void ApproveListingCtx721036_EndpointChanged(void* ptr, struct Moc_PackedString endpoint);
struct Moc_PackedString ApproveListingCtx721036_From(void* ptr);
struct Moc_PackedString ApproveListingCtx721036_FromDefault(void* ptr);
void ApproveListingCtx721036_SetFrom(void* ptr, struct Moc_PackedString from);
void ApproveListingCtx721036_SetFromDefault(void* ptr, struct Moc_PackedString from);
void ApproveListingCtx721036_ConnectFromChanged(void* ptr);
void ApproveListingCtx721036_DisconnectFromChanged(void* ptr);
void ApproveListingCtx721036_FromChanged(void* ptr, struct Moc_PackedString from);
struct Moc_PackedString ApproveListingCtx721036_Message(void* ptr);
struct Moc_PackedString ApproveListingCtx721036_MessageDefault(void* ptr);
void ApproveListingCtx721036_SetMessage(void* ptr, struct Moc_PackedString message);
void ApproveListingCtx721036_SetMessageDefault(void* ptr, struct Moc_PackedString message);
void ApproveListingCtx721036_ConnectMessageChanged(void* ptr);
void ApproveListingCtx721036_DisconnectMessageChanged(void* ptr);
void ApproveListingCtx721036_MessageChanged(void* ptr, struct Moc_PackedString message);
struct Moc_PackedString ApproveListingCtx721036_RawData(void* ptr);
struct Moc_PackedString ApproveListingCtx721036_RawDataDefault(void* ptr);
void ApproveListingCtx721036_SetRawData(void* ptr, struct Moc_PackedString rawData);
void ApproveListingCtx721036_SetRawDataDefault(void* ptr, struct Moc_PackedString rawData);
void ApproveListingCtx721036_ConnectRawDataChanged(void* ptr);
void ApproveListingCtx721036_DisconnectRawDataChanged(void* ptr);
void ApproveListingCtx721036_RawDataChanged(void* ptr, struct Moc_PackedString rawData);
struct Moc_PackedString ApproveListingCtx721036_Hash(void* ptr);
struct Moc_PackedString ApproveListingCtx721036_HashDefault(void* ptr);
void ApproveListingCtx721036_SetHash(void* ptr, struct Moc_PackedString hash);
void ApproveListingCtx721036_SetHashDefault(void* ptr, struct Moc_PackedString hash);
void ApproveListingCtx721036_ConnectHashChanged(void* ptr);
void ApproveListingCtx721036_DisconnectHashChanged(void* ptr);
void ApproveListingCtx721036_HashChanged(void* ptr, struct Moc_PackedString hash);
int ApproveListingCtx721036_ApproveListingCtx721036_QRegisterMetaType();
int ApproveListingCtx721036_ApproveListingCtx721036_QRegisterMetaType2(char* typeName);
int ApproveListingCtx721036_ApproveListingCtx721036_QmlRegisterType();
int ApproveListingCtx721036_ApproveListingCtx721036_QmlRegisterType2(char* uri, int versionMajor, int versionMinor, char* qmlName);
void* ApproveListingCtx721036___dynamicPropertyNames_atList(void* ptr, int i);
void ApproveListingCtx721036___dynamicPropertyNames_setList(void* ptr, void* i);
void* ApproveListingCtx721036___dynamicPropertyNames_newList(void* ptr);
void* ApproveListingCtx721036___findChildren_atList2(void* ptr, int i);
void ApproveListingCtx721036___findChildren_setList2(void* ptr, void* i);
void* ApproveListingCtx721036___findChildren_newList2(void* ptr);
void* ApproveListingCtx721036___findChildren_atList3(void* ptr, int i);
void ApproveListingCtx721036___findChildren_setList3(void* ptr, void* i);
void* ApproveListingCtx721036___findChildren_newList3(void* ptr);
void* ApproveListingCtx721036___findChildren_atList(void* ptr, int i);
void ApproveListingCtx721036___findChildren_setList(void* ptr, void* i);
void* ApproveListingCtx721036___findChildren_newList(void* ptr);
void* ApproveListingCtx721036___children_atList(void* ptr, int i);
void ApproveListingCtx721036___children_setList(void* ptr, void* i);
void* ApproveListingCtx721036___children_newList(void* ptr);
void* ApproveListingCtx721036_NewApproveListingCtx(void* parent);
void ApproveListingCtx721036_DestroyApproveListingCtx(void* ptr);
void ApproveListingCtx721036_DestroyApproveListingCtxDefault(void* ptr);
char ApproveListingCtx721036_EventDefault(void* ptr, void* e);
char ApproveListingCtx721036_EventFilterDefault(void* ptr, void* watched, void* event);
void ApproveListingCtx721036_ChildEventDefault(void* ptr, void* event);
void ApproveListingCtx721036_ConnectNotifyDefault(void* ptr, void* sign);
void ApproveListingCtx721036_CustomEventDefault(void* ptr, void* event);
void ApproveListingCtx721036_DeleteLaterDefault(void* ptr);
void ApproveListingCtx721036_DisconnectNotifyDefault(void* ptr, void* sign);
void ApproveListingCtx721036_TimerEventDefault(void* ptr, void* event);
;
void ApproveNewAccountCtx721036_ConnectClicked(void* ptr);
void ApproveNewAccountCtx721036_DisconnectClicked(void* ptr);
void ApproveNewAccountCtx721036_Clicked(void* ptr, int b);
void ApproveNewAccountCtx721036_ConnectBack(void* ptr);
void ApproveNewAccountCtx721036_DisconnectBack(void* ptr);
void ApproveNewAccountCtx721036_Back(void* ptr);
void ApproveNewAccountCtx721036_ConnectPasswordEdited(void* ptr);
void ApproveNewAccountCtx721036_DisconnectPasswordEdited(void* ptr);
void ApproveNewAccountCtx721036_PasswordEdited(void* ptr, struct Moc_PackedString b);
void ApproveNewAccountCtx721036_ConnectConfirmPasswordEdited(void* ptr);
void ApproveNewAccountCtx721036_DisconnectConfirmPasswordEdited(void* ptr);
void ApproveNewAccountCtx721036_ConfirmPasswordEdited(void* ptr, struct Moc_PackedString b);
struct Moc_PackedString ApproveNewAccountCtx721036_Remote(void* ptr);
struct Moc_PackedString ApproveNewAccountCtx721036_RemoteDefault(void* ptr);
void ApproveNewAccountCtx721036_SetRemote(void* ptr, struct Moc_PackedString remote);
void ApproveNewAccountCtx721036_SetRemoteDefault(void* ptr, struct Moc_PackedString remote);
void ApproveNewAccountCtx721036_ConnectRemoteChanged(void* ptr);
void ApproveNewAccountCtx721036_DisconnectRemoteChanged(void* ptr);
void ApproveNewAccountCtx721036_RemoteChanged(void* ptr, struct Moc_PackedString remote);
struct Moc_PackedString ApproveNewAccountCtx721036_Transport(void* ptr);
struct Moc_PackedString ApproveNewAccountCtx721036_TransportDefault(void* ptr);
void ApproveNewAccountCtx721036_SetTransport(void* ptr, struct Moc_PackedString transport);
void ApproveNewAccountCtx721036_SetTransportDefault(void* ptr, struct Moc_PackedString transport);
void ApproveNewAccountCtx721036_ConnectTransportChanged(void* ptr);
void ApproveNewAccountCtx721036_DisconnectTransportChanged(void* ptr);
void ApproveNewAccountCtx721036_TransportChanged(void* ptr, struct Moc_PackedString transport);
struct Moc_PackedString ApproveNewAccountCtx721036_Endpoint(void* ptr);
struct Moc_PackedString ApproveNewAccountCtx721036_EndpointDefault(void* ptr);
void ApproveNewAccountCtx721036_SetEndpoint(void* ptr, struct Moc_PackedString endpoint);
void ApproveNewAccountCtx721036_SetEndpointDefault(void* ptr, struct Moc_PackedString endpoint);
void ApproveNewAccountCtx721036_ConnectEndpointChanged(void* ptr);
void ApproveNewAccountCtx721036_DisconnectEndpointChanged(void* ptr);
void ApproveNewAccountCtx721036_EndpointChanged(void* ptr, struct Moc_PackedString endpoint);
struct Moc_PackedString ApproveNewAccountCtx721036_Password(void* ptr);
struct Moc_PackedString ApproveNewAccountCtx721036_PasswordDefault(void* ptr);
void ApproveNewAccountCtx721036_SetPassword(void* ptr, struct Moc_PackedString password);
void ApproveNewAccountCtx721036_SetPasswordDefault(void* ptr, struct Moc_PackedString password);
void ApproveNewAccountCtx721036_ConnectPasswordChanged(void* ptr);
void ApproveNewAccountCtx721036_DisconnectPasswordChanged(void* ptr);
void ApproveNewAccountCtx721036_PasswordChanged(void* ptr, struct Moc_PackedString password);
struct Moc_PackedString ApproveNewAccountCtx721036_ConfirmPassword(void* ptr);
struct Moc_PackedString ApproveNewAccountCtx721036_ConfirmPasswordDefault(void* ptr);
void ApproveNewAccountCtx721036_SetConfirmPassword(void* ptr, struct Moc_PackedString confirmPassword);
void ApproveNewAccountCtx721036_SetConfirmPasswordDefault(void* ptr, struct Moc_PackedString confirmPassword);
void ApproveNewAccountCtx721036_ConnectConfirmPasswordChanged(void* ptr);
void ApproveNewAccountCtx721036_DisconnectConfirmPasswordChanged(void* ptr);
void ApproveNewAccountCtx721036_ConfirmPasswordChanged(void* ptr, struct Moc_PackedString confirmPassword);
int ApproveNewAccountCtx721036_ApproveNewAccountCtx721036_QRegisterMetaType();
int ApproveNewAccountCtx721036_ApproveNewAccountCtx721036_QRegisterMetaType2(char* typeName);
int ApproveNewAccountCtx721036_ApproveNewAccountCtx721036_QmlRegisterType();
int ApproveNewAccountCtx721036_ApproveNewAccountCtx721036_QmlRegisterType2(char* uri, int versionMajor, int versionMinor, char* qmlName);
void* ApproveNewAccountCtx721036___dynamicPropertyNames_atList(void* ptr, int i);
void ApproveNewAccountCtx721036___dynamicPropertyNames_setList(void* ptr, void* i);
void* ApproveNewAccountCtx721036___dynamicPropertyNames_newList(void* ptr);
void* ApproveNewAccountCtx721036___findChildren_atList2(void* ptr, int i);
void ApproveNewAccountCtx721036___findChildren_setList2(void* ptr, void* i);
void* ApproveNewAccountCtx721036___findChildren_newList2(void* ptr);
void* ApproveNewAccountCtx721036___findChildren_atList3(void* ptr, int i);
void ApproveNewAccountCtx721036___findChildren_setList3(void* ptr, void* i);
void* ApproveNewAccountCtx721036___findChildren_newList3(void* ptr);
void* ApproveNewAccountCtx721036___findChildren_atList(void* ptr, int i);
void ApproveNewAccountCtx721036___findChildren_setList(void* ptr, void* i);
void* ApproveNewAccountCtx721036___findChildren_newList(void* ptr);
void* ApproveNewAccountCtx721036___children_atList(void* ptr, int i);
void ApproveNewAccountCtx721036___children_setList(void* ptr, void* i);
void* ApproveNewAccountCtx721036___children_newList(void* ptr);
void* ApproveNewAccountCtx721036_NewApproveNewAccountCtx(void* parent);
void ApproveNewAccountCtx721036_DestroyApproveNewAccountCtx(void* ptr);
void ApproveNewAccountCtx721036_DestroyApproveNewAccountCtxDefault(void* ptr);
char ApproveNewAccountCtx721036_EventDefault(void* ptr, void* e);
char ApproveNewAccountCtx721036_EventFilterDefault(void* ptr, void* watched, void* event);
void ApproveNewAccountCtx721036_ChildEventDefault(void* ptr, void* event);
void ApproveNewAccountCtx721036_ConnectNotifyDefault(void* ptr, void* sign);
void ApproveNewAccountCtx721036_CustomEventDefault(void* ptr, void* event);
void ApproveNewAccountCtx721036_DeleteLaterDefault(void* ptr);
void ApproveNewAccountCtx721036_DisconnectNotifyDefault(void* ptr, void* sign);
void ApproveNewAccountCtx721036_TimerEventDefault(void* ptr, void* event);
;
void LoginCtx721036_ConnectClicked(void* ptr);
void LoginCtx721036_DisconnectClicked(void* ptr);
void LoginCtx721036_Clicked(void* ptr);
void LoginCtx721036_ConnectEdited(void* ptr);
void LoginCtx721036_DisconnectEdited(void* ptr);
void LoginCtx721036_Edited(void* ptr, struct Moc_PackedString b);
struct Moc_PackedString LoginCtx721036_Remote(void* ptr);
struct Moc_PackedString LoginCtx721036_RemoteDefault(void* ptr);
void LoginCtx721036_SetRemote(void* ptr, struct Moc_PackedString remote);
void LoginCtx721036_SetRemoteDefault(void* ptr, struct Moc_PackedString remote);
void LoginCtx721036_ConnectRemoteChanged(void* ptr);
void LoginCtx721036_DisconnectRemoteChanged(void* ptr);
void LoginCtx721036_RemoteChanged(void* ptr, struct Moc_PackedString remote);
struct Moc_PackedString LoginCtx721036_Transport(void* ptr);
struct Moc_PackedString LoginCtx721036_TransportDefault(void* ptr);
void LoginCtx721036_SetTransport(void* ptr, struct Moc_PackedString transport);
void LoginCtx721036_SetTransportDefault(void* ptr, struct Moc_PackedString transport);
void LoginCtx721036_ConnectTransportChanged(void* ptr);
void LoginCtx721036_DisconnectTransportChanged(void* ptr);
void LoginCtx721036_TransportChanged(void* ptr, struct Moc_PackedString transport);
struct Moc_PackedString LoginCtx721036_Endpoint(void* ptr);
struct Moc_PackedString LoginCtx721036_EndpointDefault(void* ptr);
void LoginCtx721036_SetEndpoint(void* ptr, struct Moc_PackedString endpoint);
void LoginCtx721036_SetEndpointDefault(void* ptr, struct Moc_PackedString endpoint);
void LoginCtx721036_ConnectEndpointChanged(void* ptr);
void LoginCtx721036_DisconnectEndpointChanged(void* ptr);
void LoginCtx721036_EndpointChanged(void* ptr, struct Moc_PackedString endpoint);
struct Moc_PackedString LoginCtx721036_Gopath(void* ptr);
struct Moc_PackedString LoginCtx721036_GopathDefault(void* ptr);
void LoginCtx721036_SetGopath(void* ptr, struct Moc_PackedString gopath);
void LoginCtx721036_SetGopathDefault(void* ptr, struct Moc_PackedString gopath);
void LoginCtx721036_ConnectGopathChanged(void* ptr);
void LoginCtx721036_DisconnectGopathChanged(void* ptr);
void LoginCtx721036_GopathChanged(void* ptr, struct Moc_PackedString gopath);
struct Moc_PackedString LoginCtx721036_BinaryHash(void* ptr);
struct Moc_PackedString LoginCtx721036_BinaryHashDefault(void* ptr);
void LoginCtx721036_SetBinaryHash(void* ptr, struct Moc_PackedString binaryHash);
void LoginCtx721036_SetBinaryHashDefault(void* ptr, struct Moc_PackedString binaryHash);
void LoginCtx721036_ConnectBinaryHashChanged(void* ptr);
void LoginCtx721036_DisconnectBinaryHashChanged(void* ptr);
void LoginCtx721036_BinaryHashChanged(void* ptr, struct Moc_PackedString binaryHash);
char LoginCtx721036_IsValid(void* ptr);
char LoginCtx721036_IsValidDefault(void* ptr);
void LoginCtx721036_SetIsValid(void* ptr, char isValid);
void LoginCtx721036_SetIsValidDefault(void* ptr, char isValid);
void LoginCtx721036_ConnectIsValidChanged(void* ptr);
void LoginCtx721036_DisconnectIsValidChanged(void* ptr);
void LoginCtx721036_IsValidChanged(void* ptr, char isValid);
int LoginCtx721036_LoginCtx721036_QRegisterMetaType();
int LoginCtx721036_LoginCtx721036_QRegisterMetaType2(char* typeName);
int LoginCtx721036_LoginCtx721036_QmlRegisterType();
int LoginCtx721036_LoginCtx721036_QmlRegisterType2(char* uri, int versionMajor, int versionMinor, char* qmlName);
void* LoginCtx721036___dynamicPropertyNames_atList(void* ptr, int i);
void LoginCtx721036___dynamicPropertyNames_setList(void* ptr, void* i);
void* LoginCtx721036___dynamicPropertyNames_newList(void* ptr);
void* LoginCtx721036___findChildren_atList2(void* ptr, int i);
void LoginCtx721036___findChildren_setList2(void* ptr, void* i);
void* LoginCtx721036___findChildren_newList2(void* ptr);
void* LoginCtx721036___findChildren_atList3(void* ptr, int i);
void LoginCtx721036___findChildren_setList3(void* ptr, void* i);
void* LoginCtx721036___findChildren_newList3(void* ptr);
void* LoginCtx721036___findChildren_atList(void* ptr, int i);
void LoginCtx721036___findChildren_setList(void* ptr, void* i);
void* LoginCtx721036___findChildren_newList(void* ptr);
void* LoginCtx721036___children_atList(void* ptr, int i);
void LoginCtx721036___children_setList(void* ptr, void* i);
void* LoginCtx721036___children_newList(void* ptr);
void* LoginCtx721036_NewLoginCtx(void* parent);
void LoginCtx721036_DestroyLoginCtx(void* ptr);
void LoginCtx721036_DestroyLoginCtxDefault(void* ptr);
char LoginCtx721036_EventDefault(void* ptr, void* e);
char LoginCtx721036_EventFilterDefault(void* ptr, void* watched, void* event);
void LoginCtx721036_ChildEventDefault(void* ptr, void* event);
void LoginCtx721036_ConnectNotifyDefault(void* ptr, void* sign);
void LoginCtx721036_CustomEventDefault(void* ptr, void* event);
void LoginCtx721036_DeleteLaterDefault(void* ptr);
void LoginCtx721036_DisconnectNotifyDefault(void* ptr, void* sign);
void LoginCtx721036_TimerEventDefault(void* ptr, void* event);
;
void TxListCtx721036_ConnectClicked(void* ptr);
void TxListCtx721036_DisconnectClicked(void* ptr);
void TxListCtx721036_Clicked(void* ptr, int b);
void TxListCtx721036_ConnectAccountChanged(void* ptr);
void TxListCtx721036_DisconnectAccountChanged(void* ptr);
void TxListCtx721036_AccountChanged(void* ptr, int b);
struct Moc_PackedString TxListCtx721036_ShortenAddress(void* ptr);
struct Moc_PackedString TxListCtx721036_ShortenAddressDefault(void* ptr);
void TxListCtx721036_SetShortenAddress(void* ptr, struct Moc_PackedString shortenAddress);
void TxListCtx721036_SetShortenAddressDefault(void* ptr, struct Moc_PackedString shortenAddress);
void TxListCtx721036_ConnectShortenAddressChanged(void* ptr);
void TxListCtx721036_DisconnectShortenAddressChanged(void* ptr);
void TxListCtx721036_ShortenAddressChanged(void* ptr, struct Moc_PackedString shortenAddress);
struct Moc_PackedString TxListCtx721036_SelectedAddress(void* ptr);
struct Moc_PackedString TxListCtx721036_SelectedAddressDefault(void* ptr);
void TxListCtx721036_SetSelectedAddress(void* ptr, struct Moc_PackedString selectedAddress);
void TxListCtx721036_SetSelectedAddressDefault(void* ptr, struct Moc_PackedString selectedAddress);
void TxListCtx721036_ConnectSelectedAddressChanged(void* ptr);
void TxListCtx721036_DisconnectSelectedAddressChanged(void* ptr);
void TxListCtx721036_SelectedAddressChanged(void* ptr, struct Moc_PackedString selectedAddress);
struct Moc_PackedString TxListCtx721036_SelectedSrc(void* ptr);
struct Moc_PackedString TxListCtx721036_SelectedSrcDefault(void* ptr);
void TxListCtx721036_SetSelectedSrc(void* ptr, struct Moc_PackedString selectedSrc);
void TxListCtx721036_SetSelectedSrcDefault(void* ptr, struct Moc_PackedString selectedSrc);
void TxListCtx721036_ConnectSelectedSrcChanged(void* ptr);
void TxListCtx721036_DisconnectSelectedSrcChanged(void* ptr);
void TxListCtx721036_SelectedSrcChanged(void* ptr, struct Moc_PackedString selectedSrc);
int TxListCtx721036_TxListCtx721036_QRegisterMetaType();
int TxListCtx721036_TxListCtx721036_QRegisterMetaType2(char* typeName);
int TxListCtx721036_TxListCtx721036_QmlRegisterType();
int TxListCtx721036_TxListCtx721036_QmlRegisterType2(char* uri, int versionMajor, int versionMinor, char* qmlName);
void* TxListCtx721036___dynamicPropertyNames_atList(void* ptr, int i);
void TxListCtx721036___dynamicPropertyNames_setList(void* ptr, void* i);
void* TxListCtx721036___dynamicPropertyNames_newList(void* ptr);
void* TxListCtx721036___findChildren_atList2(void* ptr, int i);
void TxListCtx721036___findChildren_setList2(void* ptr, void* i);
void* TxListCtx721036___findChildren_newList2(void* ptr);
void* TxListCtx721036___findChildren_atList3(void* ptr, int i);
void TxListCtx721036___findChildren_setList3(void* ptr, void* i);
void* TxListCtx721036___findChildren_newList3(void* ptr);
void* TxListCtx721036___findChildren_atList(void* ptr, int i);
void TxListCtx721036___findChildren_setList(void* ptr, void* i);
void* TxListCtx721036___findChildren_newList(void* ptr);
void* TxListCtx721036___children_atList(void* ptr, int i);
void TxListCtx721036___children_setList(void* ptr, void* i);
void* TxListCtx721036___children_newList(void* ptr);
void* TxListCtx721036_NewTxListCtx(void* parent);
void TxListCtx721036_DestroyTxListCtx(void* ptr);
void TxListCtx721036_DestroyTxListCtxDefault(void* ptr);
char TxListCtx721036_EventDefault(void* ptr, void* e);
char TxListCtx721036_EventFilterDefault(void* ptr, void* watched, void* event);
void TxListCtx721036_ChildEventDefault(void* ptr, void* event);
void TxListCtx721036_ConnectNotifyDefault(void* ptr, void* sign);
void TxListCtx721036_CustomEventDefault(void* ptr, void* event);
void TxListCtx721036_DeleteLaterDefault(void* ptr);
void TxListCtx721036_DisconnectNotifyDefault(void* ptr, void* sign);
void TxListCtx721036_TimerEventDefault(void* ptr, void* event);
;

#ifdef __cplusplus
}
#endif

#endif